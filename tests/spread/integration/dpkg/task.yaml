summary: Integration tests for dpkg

execute: |
  # Chisel a minimum number of slices to give us a runnable system that we can
  # test in.
  rootfs="$(install-slices diffutils_bins dpkg_bins)"

  # Get a sample deb file to install. Contains no dependencies or install scripts.
  apt update
  mkdir -p "${rootfs}/debs"
  pushd "${rootfs}/debs"
  apt download lsb-release
  popd

  # Run a smoke test for dpkg to ensure that it does not throw an error
  chroot "${rootfs}/" dpkg --install -R /debs


  # Chisel a minimum number of slices to give us a system that can run dpkg with
  # maintainer scripts.
  rootfs="$(install-slices dpkg_maintscript-support)"

  apt update
  mkdir -p "${rootfs}/debs"
  pushd "${rootfs}/debs"
  # Note: The essential-packages.txt file is generated by the the command
  #  dpkg-query -W -f='${Package} ${Essential}\n' | grep yes | cut -d ' ' -f 1
  # inside an Ubuntu container.
  apt-get -o Dir::Cache::archives=$(pwd) -o Debug::NoLocking=1 -o Dir::State::status=/dev/null install --assume-yes \
    --download-only --reinstall --no-install-recommends $(cat essential-packages.txt)
  popd

  # The first pass is expected to have some errors due to unmet dependencies for, e.g., libpam-modules and util-linux.
  chroot "${rootfs}/" dpkg --unpack --force-depends -R /debs || true
  chroot "${rootfs}/" dpkg --configure -a || true
  # The second pass is expected to succeed.
  chroot "${rootfs}/" dpkg --unpack --force-depends -R /debs || true
  chroot "${rootfs}/" dpkg --configure -a || true
  
