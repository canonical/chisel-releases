#!/usr/bin/env bash

if [[ "$1" != "--spread" ]]; then
    FILE_DIR=$(realpath "$(dirname "$0")")
    source "$FILE_DIR"/setup.sh
else
    # We want to run apt-update only in spreads
    apt update
fi

## TESTS 
# spellchecker: ignore rootfs maintscript distro debootstrap libpam

# Test 2: More comprehensive test for dpkg with maintainer scripts support
# This test installs all essential packages using dpkg, which requires
# support for running maintainer scripts.

# Note 1: This test alone is not enough to validate the sufficiency of the 
# `dpkg_maintscript-support` slice, as some essential packages will be forced to
# re-install from the deb packages. The completeness of the slice should be further
# validated with the spread test of `apt`

# Note 2: This is for testing only and is not a valid real-world use case of dpkg.
# For the distro-related packages, their initial installation should be performed by
# debootstrap when building the base image by design. For add-on packages, their
# installation should be dictated by apt to sort the dependencies. User installing
# a third-party package should take care of the dependencies on their own, and when
# there are broken deps/installations, they should always run `apt install -f` afterwards,
# but running apt is beyond the scope of this test.

rootfs="$(install-slices dpkg_maintscript-support)"

mkdir -p "${rootfs}/debs"
# Note: The essential_packages.txt file is generated by the the command
#  dpkg-query -W -f='${Package} ${Essential}\n' | grep yes | cut -d ' ' -f 1
# inside an Ubuntu container.

# shellcheck disable=SC2046
apt-get \
  -o Dir::Cache::archives="${rootfs}/debs" \
  -o Debug::NoLocking=1 \
  -o Dir::State::status=/dev/null install \
  --assume-yes \
  --download-only \
  --reinstall \
  --no-install-recommends \
  $(cat essential_packages.txt)

# The first pass is expected to have some errors due to unmet dependencies,
# e.g., libpam-modules and util-linux.
chroot "${rootfs}/" dpkg --unpack --force-depends -R /debs || true
chroot "${rootfs}/" dpkg --configure -a || true

# The second pass is expected to succeed.
chroot "${rootfs}/" dpkg --unpack --force-depends -R /debs
chroot "${rootfs}/" dpkg --configure -a

