summary: Integration tests for .NET 8 SDK 

variants:
    - +WithoutLibicu
    - +WithLibicu

environment:
  # needed, because libicu is not installed
  DOTNET_SYSTEM_GLOBALIZATION_INVARIANT/WithoutLibicu: "true"
  # disable noisy help text for users who run .NET for the first time
  DOTNET_NOLOGO: "true"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
  HOME: /root

prepare: |
  required_slices=(dotnet-sdk-8.0_libs base-passwd_data)
  if [[ ! -v DOTNET_SYSTEM_GLOBALIZATION_INVARIANT ]]; then
    required_slices+=(libicu74_libs)
  fi
  
  # install slices
  rootfs="$(install-slices ${required_slices[@]})"
  echo "$rootfs" > ROOTFS
  
  # needed by the SDK to determine system information
  mkdir -p "${rootfs}"/proc
  mount --bind /proc "${rootfs}"/proc
 
  # needed by various utilities of the SDK
  mkdir -p "${rootfs}/tmp"
  
  # needed by crypto libraries e.g. to generate a GUID's
  mkdir -p "${rootfs}"/dev
  head -c 500 /dev/urandom > "${rootfs}"/dev/random
  head -c 500 /dev/urandom > "${rootfs}"/dev/urandom
  
  # The .NET SDK creates config files in the users home directory.
  mkdir -p "${rootfs}${HOME}"

  # Set the user config to not use nuget.org, because sometimes dotnet restore is
  # flaky and hangs indefinitely. Also, we do not need depenencies from the internet.
  mkdir -p "${rootfs}${HOME}/.nuget/NuGet"
  cp NuGet.Config "${rootfs}${HOME}/.nuget/NuGet/NuGet.Config"
  
  cp helloworld.fsx "${rootfs}"/helloworld.fsx

execute: |
  rootfs="$(cat ROOTFS)"

  # smoke test the .NET host:
  chroot "${rootfs}" /usr/bin/dotnet --info

  # smoke test the F# interpreter:
  chroot "${rootfs}" /usr/bin/dotnet fsi /helloworld.fsx | grep -q "Hello from F#"

  # Create a C# Hello World .NET app from templates
  # Using --no-restore flag, because dotnet new hangs indefinitely at restoring (related to: https://github.com/dotnet/core/issues/8057)
  chroot "${rootfs}" /usr/bin/dotnet new console --output /app_helloworld --no-restore

  # Build the C# Hello World .NET app
  chroot "${rootfs}" /usr/bin/dotnet restore /app_helloworld/app_helloworld.csproj
  chroot "${rootfs}" /usr/bin/dotnet build /app_helloworld/app_helloworld.csproj --configuration Release --no-restore
  chroot "${rootfs}" /usr/bin/dotnet publish /app_helloworld/app_helloworld.csproj --no-restore --no-build
  
  # Run the C# Hello World .NET app
  chroot "${rootfs}" /usr/bin/dotnet /app_helloworld/bin/Release/net8.0/publish/app_helloworld.dll | grep -q "Hello, World!"
