summary: Integration tests for openjdk-17-jdk-headless

environment:
  SLICE/core: "core"
  SLICE/standard: "standard"
  SLICE/modules: "modules"

execute: |
  pids=()
  cleanup() {
    for pid in "${pids[@]}"; do
      kill "$pid" || true
    done
    apt remove --purge -y openjdk-17-jdk-headless
  }
  for sig in INT QUIT HUP TERM; do trap "cleanup; trap - $sig EXIT; kill -s $sig "'"$$"' "$sig"; done
  trap cleanup EXIT

  apt install --update -y openjdk-17-jdk-headless
  # Need to ensure we're using the right java version
  update-java-alternatives --set /usr/lib/jvm/java-1.17.0*

  # Test different slice installations
  echo "SLICE=${SLICE}"
  rootfs="$(install-slices openjdk-17-jdk-headless_${SLICE} dash_bins)"
  cp *.java ${rootfs}/
  cp all.policy ${rootfs}/
  javac *.java

  nohup java -cp . MonitoringTest &
  pid=$!
  pids+=("$pid")

  cp *.class ${rootfs}/
  cd ${rootfs}
  mkdir -p proc sys tmp
  mount --bind /proc proc
  mount --bind /sys sys
  mount --bind /tmp tmp
  case ${SLICE} in
    core)
      for java in `find usr/lib/jvm -name java`; do
        home=$(dirname ${java})
        # /usr/lib/jvm/java-17-openjdk-*/bin/javac:
        chroot . ${home}/javac /Main.java -d /
        # /usr/lib/jvm/java-17-openjdk-*/bin/javadoc:
        chroot . ${home}/javadoc /Main.java
        # /usr/lib/jvm/java-17-openjdk-*/bin/javap:
        chroot . ${home}/javap -l /Main.class
        # /usr/lib/jvm/java-17-openjdk-*/bin/jdeprscan:
        chroot . ${home}/jdeprscan --class-path . Main
        # /usr/lib/jvm/java-17-openjdk-*/bin/jdeps:
        chroot . ${home}/jdeps -m java.base
        # /usr/lib/jvm/java-17-openjdk-*/bin/jimage:
        chroot . ${home}/jimage info ${home}/../lib/modules
        # /usr/lib/jvm/java-17-openjdk-*/bin/serialver:
        chroot . ${home}/serialver -classpath / SerializableObject
      done
      ;;
    standard)
      for java in `find usr/lib/jvm -name java`; do
        home=$(dirname ${java})
        # /usr/lib/jvm/java-17-openjdk-*/bin/jar:
        # /usr/lib/jvm/java-17-openjdk-*/bin/jarsigner:
        chroot . ${home}/jar cvf test.jar *.java
        DNAME="CN=Sample Cert, OU=R&D, O=Company Ltd., L=Dublin 4, S=Dublin, C=IE"
        chroot . ${home}/keytool -genkeypair -keystore foo -storepass barbar -keyalg RSA -dname "$DNAME" -alias foo
        chroot . ${home}/jarsigner -keystore foo -storepass barbar test.jar foo
        # /usr/lib/jvm/java-17-openjdk-*/bin/jdb:
        chroot . /usr/bin/sh -c "echo run | ${home}/jdb Main.java"
        # /usr/lib/jvm/java-17-openjdk-*/bin/jcmd:
        chroot . ${home}/jcmd MonitoringTest VM.version
        # /usr/lib/jvm/java-17-openjdk-*/bin/jhsdb:
        if [ -f ${home}/jhsdb ]; then
          chroot . ${home}/jhsdb jstack --pid ${pid}
        fi
        # /usr/lib/jvm/java-17-openjdk-*/bin/jfr:
        chroot . ${home}/jcmd ${pid} JFR.start name=recording maxsize=1MB
        chroot . ${home}/jcmd ${pid} JFR.dump name=recording filename=/tmp/recording.jfr
        chroot . ${home}/jfr print /tmp/recording.jfr > /dev/null
        # /usr/lib/jvm/java-17-openjdk-*/bin/jinfo:
        chroot . ${home}/jinfo ${pid}
        # /usr/lib/jvm/java-17-openjdk-*/bin/jrunscript:
        chroot . ${home}/jrunscript -q
        # /usr/lib/jvm/java-17-openjdk-*/bin/jshell:
        chroot . /usr/bin/sh -c "echo 'System.out.println(\"hello world\")' | ${home}/jshell"
        # /usr/lib/jvm/java-17-openjdk-*/bin/jstack:
        chroot . ${home}/jstack ${pid}
        # /usr/lib/jvm/java-17-openjdk-*/bin/jstat:
        chroot . ${home}/jstat -gc ${pid}
        # /usr/lib/jvm/java-17-openjdk-*/bin/jstatd:
        nohup chroot . ${home}/jstatd -J-Djava.security.policy=all.policy > ./jstatd.log &
        pids+=($!)
        for retry in 0 1 2 3 4 5; do
          if [ ${retry} -eq 5 ]; then
            exit 1
          fi
          grep -q "bound to /JStatRemoteHost" "jstatd.log" && break
          sleep 10
        done
      done
      ;;
    modules)
      cd ${rootfs}
      for jlink in `find usr/lib/jvm -name jlink`; do
        output=$(basename $(mktemp -u))
        chroot . ${jlink} --add-modules java.base --output ${output}
        rm -rf ${rootfs}/${output}
      done
      for jmod in `find usr/lib/jvm -name jmod`; do
        home=$(dirname ${jmod})
        chroot . ${jmod} list ${home}/../jmods/java.rmi.jmod
      done
      ;;
  esac
