summary: Integration tests for git

environment:
  EXTRA_SLICES: "" # No extra slices by default.
  # test git_bins
  RUN/bins: test_bins
  SLICE/bins: git_bins
  # test git_http-support
  RUN/http_support: test_http_support
  SLICE/http_support: git_http-support
  EXTRA_SLICES/http_support: ca-certificates_data
  # test git_ftp-support
  RUN/ftp_support: test_ftp_support
  SLICE/ftp_support: git_ftp-support
  # test git_daemon
  RUN/daemon_support: test_daemon_support
  SLICE/daemon_support: git_daemon

execute: |

  git_rootfs="/"
  function chroot_git(){
    # execute git within chroot. We use -C to cd since
    # we have no $SHELL to navigate with. 
    repo="$(realpath -e --relative-to="$git_rootfs" "$PWD")"
    chroot "$git_rootfs" /usr/bin/git -C "$repo" "$@"
  }

  function setup(){
    mkdir -p "$1/dev/"
    mkdir -p "$1/etc/"

    # fake essentials
    touch "$1/dev/null"
    head -c 500 /dev/urandom > "$1/dev/urandom"
    cp /etc/resolv.conf $1/etc/
    mkdir "$1/root"

    # configure
    git_rootfs="$1"
    pushd "$1"

  }

  function cleanup(){
    popd
  }

  function test_bins(){
    chroot_git init
    chroot_git config user.email "root@localhost"
    chroot_git config user.name "Test Runner"

    echo "Test" > "$1/test.txt"
    chroot_git add test.txt
    chroot_git commit -m 'test commit'

    chroot_git --no-pager status
    chroot_git --no-pager log

    chroot_git blame -L 1,1 test.txt
    [[ $(chroot_git ls-files) == "test.txt" ]]

    chroot_git checkout -b test

    chroot_git --no-pager diff master
    chroot_git branch
    chroot_git checkout master
    chroot_git merge test
  }

  function test_http_support(){
    chroot_git clone --depth 1 https://git.launchpad.net/ubuntu/+source/hello hello
    cd $_

    chroot_git --no-pager log
    chroot_git fetch origin
    chroot_git --no-pager  branch --remotes --contains $(chroot_git rev-list -n 1 HEAD)
  }

  function test_ftp_support(){
    ftp_root=$(install-slices python3-pyftpdlib_libs)

    mkdir -p srv/git/ftp-src
    pushd $_
    chroot_git init --bare
    chroot_git update-server-info
    popd

    cp -r $1/srv $ftp_root

    pushd $ftp_root/srv/git
    chroot $ftp_root /usr/bin/python3 -m pyftpdlib -V -p 2121 -d /srv/git &
    pyftpdlib_pid=$!
    popd

    # wait for server port to become available
    while ! fuser 2121/tcp > /dev/null 2>&1
    do
      if ! test -d /proc/$pyftpdlib_pid 
      then
        echo "pyftpdlib exited early"
        exit 1
      fi
      sleep 1
    done

    # Test cloning the repo
    chroot_git clone ftp://localhost:2121/ftp-src ftp-dst

    # cleanup
    kill -TERM $(fuser 2121/tcp  2>/dev/null)
  }

  function test_daemon_support(){
    mkdir -p $1/srv/git/daemon-src

    pushd $1/srv/git/daemon-src
    git init
    touch test-file
    chroot_git add test-file
    chroot_git config user.email "root@localhost"
    chroot_git config user.name "Test Runner"
    chroot_git commit -m "Hello daemon"
    popd

    chroot_git daemon \
      --base-path=/srv/git \
      --reuseaddr \
      --listen=127.0.0.1 \
      --verbose \
      --export-all &
    daemon_pid=$!


    # Wait for daemon to start
    while ! fuser 9418/tcp > /dev/null 2>&1
    do
      if ! test -d /proc/$daemon_pid 
      then
        echo "daemon exited early"
        exit 1
      fi
      sleep 1
    done

    # Test cloning the repo
    chroot_git clone git://localhost/daemon-src daemon-dst

    # Cleanup. TERM or KILL cause git to return an en error.
    kill -INT $(fuser 9418/tcp  2>/dev/null)
  }

  rootfs=$(install-slices $SLICE $EXTRA_SLICES)
  setup $rootfs
  $RUN $rootfs
  cleanup
