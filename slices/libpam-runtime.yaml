package: libpam-runtime

essential:
  - libpam-runtime_copyright

slices:
  # perl scripts that rely on debconf to properly work and discover
  # plugins/rules in /usr/share/pam-configs/*
  # /usr/sbin/pam-auth-update:
  # /usr/sbin/pam_getenv:
  # The libpam-runtime package caries nothing that can actually be directly
  # used by other packages. The files that are used, are generated by "usr/sbin/pam-auth-update"
  # based on input from /usr/share/pam-configs/* and outputs five different files into
  # /etc/pam.d/common-{account,auth,password,session,session-non-interactive}. The contents
  # of those are directly derived from the contents of the pam-configs.
  # Other packages can carry these pam-configs too, and usually invoke pam-auth-update
  # to regenerate these five files mentioned.
  # pam-config and pam-defaults slices are only used for generation, and are useless
  # for anything else.

  # Emulate in part what pam-auth-update does. There is a short coming right now, we
  # cannot include other files from other slices that install into
  #   /usr/share/pam-configs/*
  # since this mutation script wont be able to access them as of writing.
  config:
    essential:
      - libpam-runtime_var
    contents:
      /etc/pam.conf:
      /etc/pam.d/common-account: { text: "", mutable: true }
      /etc/pam.d/common-auth: { text: "", mutable: true }
      /etc/pam.d/common-password: { text: "", mutable: true }
      /etc/pam.d/common-session: { text: "", mutable: true }
      /etc/pam.d/common-session-noninteractive: { text: "", mutable: true }
      /etc/pam.d/other:
      /usr/share/pam-configs/unix: { until: mutate }
      /usr/share/pam/common-account: { until: mutate }
      /usr/share/pam/common-auth: { until: mutate }
      /usr/share/pam/common-password: { until: mutate }
      /usr/share/pam/common-session: { until: mutate }
      /usr/share/pam/common-session-noninteractive: { until: mutate }
    mutate: |
      defaults_dir = "/usr/share/pam-configs/"
      template_dir = "/usr/share/pam/"
      config_dir = "/etc/pam.d/"
      default_line = "[default=1]\t\t\tpam_permit.so"

      type_map = {
          "Auth-Type": "auth",
          "Account-Type": "account",
          "Session-Type": "session-noninteractive",
          "Password-Type": "password",
      }

      template_map = {
        "account": "$account",
        "auth": "$auth",
        "password": "$password",
        "session": "$session",
        "session-noninteractive": "$session_nonint",
       }

      initial_sections = [
        "Auth-Initial",
        "Account-Initial",
        "Session-Initial",
        "Password-Initial"
      ]

      def get_template(config_type):
          return content.read(template_dir + "common-" + config_type)

      def set_config(config_type, config_content):
          return content.write(config_dir + "common-" + config_type, config_content)

      def parse_config(lines):
          config_data = {}
          current_section = ""
          current_type = ""
          priority = ""
          for line_no, line in enumerate(lines):
              parts = line.split(":", 1)
              key = parts[0].strip()
              value = parts[1].strip() if len(parts) > 1 else ""  # default to empty string
              if key == "priority":
                  priority = value
              elif key in type_map:
                  current_section = type_map[key]
                  current_type = value
              elif key == "Session-Interactive-Only" and value == "yes":
                  current_section = "session"
              elif key in initial_sections:
                  data = []
                  for subline in lines[line_no + 1 :]:
                      if ":" in subline:
                          break
                      data.append(subline.strip())
                  config_data[current_section] = {current_type: {priority: data}}
          return config_data

      def reconfigure_data_line(section, line, index):
          updated_line = line.replace("success=end", "success=" + str(index))
          if section == "session-noninteractive":
              section = "session"
          return section + "\t" + updated_line + "\n\n"

      def build_block(data, section, block, existing=""):
          result = existing
          if section in data and block in data[section]:
              items_by_priority = data[section][block]
              for priority in sorted(items_by_priority.keys(), reverse=True):
                  for line in items_by_priority[priority]:
                      result += reconfigure_data_line(
                          section, line, len(result.splitlines()) + 1
                      )
          if result == "" and block == "Primary":
              return reconfigure_data_line(section, default_line, 1)
          return result

      # load configuration defaults
      config_data = {}
      for conf_file in content.list(defaults_dir):
          conf_content = content.read(defaults_dir + conf_file)
          config_data.update(parse_config(conf_content.splitlines()))

      # write configs from templates
      for config_type, var_stem in template_map.items():
          template = get_template(config_type)
          primary_block = build_block(config_data, config_type, "Primary")
          additional_block = build_block(config_data, config_type, "Additional")

          if config_type == "session":
              primary_block = build_block(
                  config_data, "session-noninteractive", "Primary", primary_block
              )
              additional_block = build_block(
                  config_data, "session-noninteractive", "Additional", additional_block
              )

          config_content = template.replace(var_stem + "_primary", primary_block)
          config_content = config_content.replace(var_stem + "_additional", additional_block)
          set_config(config_type, config_content)

  # The following two slices are kept for backwards compatibility.
  # However, the pam-defaults have been modified to deliver correct
  # files instead of templates.
  pam-config:
    contents:
      /usr/share/pam-configs/unix:

  pam-defaults:
    contents:
      /usr/share/pam/common-account:
      /usr/share/pam/common-account.md5sums:
      /usr/share/pam/common-auth:
      /usr/share/pam/common-auth.md5sums:
      /usr/share/pam/common-password:
      /usr/share/pam/common-password.md5sums:
      /usr/share/pam/common-session:
      /usr/share/pam/common-session-noninteractive:
      /usr/share/pam/common-session-noninteractive.md5sums:
      /usr/share/pam/common-session.md5sums:

  # folders expected by libpam to exist
  var:
    contents:
      /var/lib/pam/:

  copyright:
    contents:
      /usr/share/doc/libpam-runtime/copyright:

