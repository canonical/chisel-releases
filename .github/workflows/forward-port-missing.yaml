name: "Forward port missing"

# This workflow checks whether there exists a forward port for the slices and
# applies the `forward port missing` label if necessary.

# It can also be called manually or from other workflows to just create
# the data file with the PR information.

on:
  schedule:
    # Run every 1/2 hour
    # Ref: https://man7.org/linux/man-pages/man5/crontab.5.html
    - cron: "*/30 * * * *"
  workflow_dispatch:
  workflow_call:
    inputs:
      data_file:
        description: "Path to the data file to use"
        required: false
        type: string
        default: "data.pickle.gz"

jobs:
  check-forward-port:
    name: "Check for forward port"
    runs-on: ubuntu-latest
    env:
      files_main: "main-files"
      src_dir: ".github/scripts/forward-port-missing/src"
      default_data_file: "data.pickle.gz"
      # set the GitHub token to allow the script to add labels to the PR with
      # the `gh` CLI
      GH_TOKEN: ${{ github.token }} 
  
    # we need write permissions to be able to add labels
    permissions:
      pull-requests: write

    steps:

      #== ENV ==================================================================

      # If we're running on a schedule or via workflow_dispatch, we want to set the RUN_FORWARD_PORT_MISSING
      # and RUN_APPLY_LABELS env vars to true. If not, set them to false.
      - name: "Set env variables (schedule or workflow_dispatch)"
        if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
        run: |
          echo "DATA_FILE=${{ env.default_data_file }}" >> $GITHUB_ENV
          echo "RUN_FORWARD_PORT_MISSING=true" >> $GITHUB_ENV
          echo "RUN_APPLY_LABELS=true" >> $GITHUB_ENV
      
      - name: "Set env variables (called from another workflow)"
        if: ${{ github.event_name == 'workflow_call' && (inputs.data_file != '' || inputs.data_file != null) }}
        run: |
          echo "DATA_FILE=${{ inputs.data_file }}" >> $GITHUB_ENV
          echo "RUN_FORWARD_PORT_MISSING=false" >> $GITHUB_ENV
          echo "RUN_APPLY_LABELS=false" >> $GITHUB_ENV
      
      #== SETUP ================================================================

      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: '3.10' }

      - name: "Set reference to main branch"
        id: set-main-ref
        run: |
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            # For PRs to main, use the updated files.
            # Leaving checkout_main_ref unset will checkout the PR head_ref.
            echo "ref_main=" >> $GITHUB_OUTPUT
          else
            echo "ref_main=main" >> $GITHUB_OUTPUT
          fi

      - name: "Checkout main branch"
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.set-main-ref.outputs.ref_main }}
          path: ${{ env.files_main }}
      
      #== MAIN =================================================================

      - name: "Gather data"
        env:
          GITHUB_TOKEN: ${{ secrets.ROCKSBOT_PR_TOKEN }}
          CHISEL_RELEASES_URL: http://github.com/canonical/chisel-releases
        run: |
          ln -s "${{ env.files_main }}/${{ env.src_dir }}/chisel_releases_data.py" .
          ./chisel_releases_data.py --log-level=debug -j=-1 "${{ env.DATA_FILE }}"

      - name: "Check for forward port"
        if: env.RUN_FORWARD_PORT_MISSING == 'true'
        run: |
          ln -s "${{ env.files_main }}/${{ env.src_dir }}/forward_port_missing.py" .
          ./forward_port_missing.py "${{ env.DATA_FILE }}" --log-level=debug --format=json 1> results.json
          cat results.json

      - name: "Apply labels"
        if: env.RUN_APPLY_LABELS == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ROCKSBOT_PR_TOKEN }}
        run: |
          ln -s "${{ env.files_main }}/${{ env.src_dir }}/apply_pr_labels.sh" .
          cat results.json | ./apply_pr_labels.sh