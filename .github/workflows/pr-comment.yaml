# Generic PR comment workflow
# 
# This workflow listens for completion of other workflows and posts PR comments
# when those workflows upload a "pr-comment-data" artifact containing JSON with:
# {
#   "pr-number": <number>,
#   "message-id": "<string>", 
#   "message": "<string>"
# }
#
# To use this from another workflow:
# 1. Write your comment message to a file
# 2. Use the canonical/chisel-releases/.github/actions/upload-pr-comment@main
#    action to create and upload the "pr-comment-data" artifact
# 3. Add your workflow name to the "workflows" list below. This will trigger
#    this workflow to run, pick up the artifact, and post the comment.

name: Post PR comment

on:
  workflow_run:
    workflows: ["Pkg coverage"]
    types:
      - completed

jobs:
  post-comment:
    name: Post PR comment
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    permissions:
      pull-requests: write
    steps:
      # We cannot use actions/download-artifact here because this workflow needs to
      # download the artefact from a different workflow (the one that triggered it).
      - name: Download PR comment artifact
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr-comment-data"
            })[0];
            if (!matchArtifact) {
              console.log('No pr-comment-data artifact found');
              return;
            }
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr-comment-data.zip`, Buffer.from(download.data));

      - name: Extract comment data
        id: comment-data
        run: |
          if [ -f pr-comment-data.zip ]; then
            unzip pr-comment-data.zip
            if [ -f pr-comment.json ]; then
              echo "pr-number=$(jq -r '.["pr-number"]' pr-comment.json)" >> $GITHUB_OUTPUT
              echo "message-id=$(jq -r '.["message-id"]' pr-comment.json)" >> $GITHUB_OUTPUT
              echo "$(jq -r '.message' pr-comment.json)" > pr-comment-message.txt
              echo "has-comment=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Post comment to PR
        if: steps.comment-data.outputs.has-comment == 'true'
        uses: mshick/add-pr-comment@v2
        with:
          message-path: pr-comment-message.txt
          issue: ${{ steps.comment-data.outputs.pr-number }}
          message-id: ${{ steps.comment-data.outputs.message-id }}