#!/bin/bash

# This script takes in a git ref and checks if any slices present in the former
# ref (commit, branch etc) were removed. Must be run in the chisel-releases
# root directory. It exits with an error (code 1) if removals found.
#
# Needs: yq (https://github.com/mikefarah/yq).

set -eu

if (( $# != 1 )); then
  echo -e "Usage:\n\t$(basename "$0") <old-git-ref>" >&2
  exit 1
fi

# We cannot work on a dirty repo as we need to checkout to other refs.
if ! git diff-index --quiet HEAD; then
  echo "error: there are uncommitted changes" >&2
  exit 1
fi

export LC_COLLATE="C"
oldref="$1"
curref="$(git rev-parse --short HEAD)"
exitcode=0

# Check for deleted or renamed slice definition files.
deleted_files=()
while IFS= read -r f; do
  deleted_files+=( "$f" )
done < <(git diff --name-only --diff-filter=DR "$oldref" "$curref" -- slices/)
if (( ${#deleted_files[@]} )); then
  echo "The following slice definition files have been deleted or renamed:"
  for f in "${deleted_files[@]}"; do
    echo "- $f"
  done
  exitcode=1
fi

# Determine the list of files that have been modified between the two refs.
# This is done here by excluding the files that have been added, deleted or
# renamed. See git-diff(1) --diff-filter.
modified=()
while IFS= read -r f; do
  modified+=( "$f" )
done < <(git diff --name-only --diff-filter=adr "$oldref" "$curref" -- slices/)

# Lists all slices in the [modified] files.
list() {
  local pkg f ref
  ref="$(git rev-parse --short HEAD)"
  for f in "${modified[@]}"; do
    if [ ! -f "$f" ]; then
      # This should not happen, but better safe than sorry.
      echo "error: file $f not found in $ref" >&2
      exit 1
    fi
    # Get the slice names from the file, prefix with "<pkg>_"
    # (package name and an underscore) and sort.
    pkg="$(yq '.package' "$f")"
    yq '.slices | keys | .[]' "$f"  |
      sed "s/^/$pkg\_/"             |
      sort
  done
}

# Revert to the current git ref on exit.
# shellcheck disable=SC2317  # Don't warn about unreachable commands.
revert() {
  git checkout -q "$curref"
}
trap revert EXIT

# List of slices in current ref, in a file.
cur="$(list)"

# List of slices in old ref, in a file.
git checkout -q "$oldref"
old="$(list)"

# Check which slices are removed.
# The following diff command only reports the deletions from the [old] value.
removed_slices=()
while IFS= read -r f; do
  removed_slices+=( "$f" )
done < <(
  diff --changed-group-format='%<' --unchanged-group-format='' \
    <(echo "$old") <(echo "$cur")
)
if (( "${#removed_slices[@]}" )); then
  echo "The following slices have been removed:"
  for s in "${removed_slices[@]}"; do
    echo "- $s"
  done
  exitcode=1
fi

exit "$exitcode"
